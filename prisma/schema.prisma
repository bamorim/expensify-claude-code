// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    memberships   Membership[]
    createdOrganizations Organization[]
    sentInvitations Invitation[] @relation("InvitedBy")
}

model Organization {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    memberships Membership[]
    invitations Invitation[]
    expenseCategories ExpenseCategory[]

    @@index([name])
}

model Membership {
    id             String   @id @default(cuid())
    role           Role     @default(MEMBER)
    joinedAt       DateTime @default(now())

    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    @@unique([userId, organizationId])
    @@index([organizationId])
    @@index([userId])
}

enum Role {
    ADMIN
    MEMBER
}

enum InvitationStatus {
    PENDING
    ACCEPTED
    EXPIRED
}

model Invitation {
    id             String           @id @default(cuid())
    email          String
    role           Role             @default(MEMBER)
    status         InvitationStatus @default(PENDING)
    token          String           @unique @default(cuid())
    createdAt      DateTime         @default(now())
    expiresAt      DateTime

    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String
    invitedBy      User         @relation("InvitedBy", fields: [invitedById], references: [id])
    invitedById    String

    @@unique([email, organizationId])
    @@index([organizationId])
    @@index([email])
    @@index([token])
}

model ExpenseCategory {
    id             String   @id @default(cuid())
    name           String
    description    String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    @@unique([name, organizationId])
    @@index([organizationId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
